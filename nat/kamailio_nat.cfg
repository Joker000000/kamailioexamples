#!KAMAILIO

####### Defined Values #########

#!substdef "!MY_IP_ADDR!kamailio_pvtip!g"
#!substdef "!MY_EXTERNAL_IP!kamailio_ip!g"
#!substdef "!MY_UDP_PORT!5060!g"
#!substdef "!MY_TCP_PORT!5060!g"
#!substdef "!MY_UDP_ADDR!udp:MY_IP_ADDR:MY_UDP_PORT!g"
#!substdef "!MY_TCP_ADDR!tcp:MY_IP_ADDR:MY_TCP_PORT!g"

# Relay All requests and replys set flags 

# ----------- global configuration parameters ------------------------

debug=3         # debug level (cmd line: -dddddddddd)

#fork=yes
#log_stderror=no	# (cmd line: -E)
fork=no
log_stderror=yes

#check_via=no	# (cmd. line: -v)
#dns=no          # (cmd. line: -r)
#rev_dns=no      # (cmd. line: -R)

children=4
#fifo="/tmp/ser_fifo"

listen=kamailio_pvtip
port=5060
mpath = "/usr/local/lib64/kamailio/modules/:/usr/lib/x86_64-linux-gnu/kamailio/modules/"

listen = MY_UDP_ADDR advertise MY_EXTERNAL_IP:MY_UDP_PORT
listen = MY_TCP_ADDR advertise MY_EXTERNAL_IP:MY_TCP_PORT

# ------------------ module loading ----------------------------------

loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "nathelper.so"

# ----------------- setting module-specific parameters ---------------

# -- usrloc params --
modparam("usrloc", "db_mode",   0)

# -- rr params --
modparam("rr", "enable_full_lr", 1)

# -------------------------  request routing logic -------------------

# main routing logic

route{

	setflag(1);

	# block when transaction completed with a negative result but before sending a final reply
	t_on_failure("1");
	
	# block when reply for the current transaction is received
	t_on_reply("1");
	
	log(1, "message received \n");
	
	# relay a message statefully to the destination indicated in the current URI 
	#t_relay();

	# relay to speific host and port
	#t_relay("kamailio_pvtip", "5060")

	# relay a message statefully using a fixed protocol
	#t_relay_to_udp("kamailio_pvtip", "5060");

	if (!t_relay()) 
	{ 
	    sl_reply_error(); 
	    break; 
	};

	break;

}

onreply_route[1]
{
	if (status=~ "(183)|2[0-9][0-9]"){
		# Rewrites SDP body to ensure that media is passed through an RTP proxy
		force_rtp_proxy();
		search_append('^(Contact|m)[ \t]*:.*sip:[^>[:cntrl:]]*', ';nat=yes');
	}
	if (nat_uac_test("1")){
		fix_nated_contact();
	}
}

failure_route[1] 
{
	if (isflagset(1)) {
		log(1, "failure: flag set\n");
	} else {
		log(1, "failure: flag unset\n");
	};
}
