#!KAMAILIO

#!define WITH_POSTGRES
#!define WITH_AUTH
#!define WITH_USRLOCDB
#!define WITH_TLS
#!define WITH_WEBSOCKETS

#!substdef "!MY_IP_ADDR!<pvt_ip>!g"
#!substdef "!MY_DOMAIN!<public_ip>!g"
#!substdef "!MY_SIP_PORT!5060!g"
#!substdef "!MY_SIPS_PORT!5061!g"
#!substdef "!MY_WS_PORT!8080!g"
#!substdef "!MY_WSS_PORT!443!g"
#!substdef "!MY_WS4_ADDR!tcp:MY_IP_ADDR:MY_WS_PORT!g"
#!substdef "!MY_WSS4_ADDR!tls:MY_IP_ADDR:MY_WSS_PORT!g"


#!ifdef WITH_POSTGRES
#!ifndef DBURL
#!define DBURL "postgres://user:pass@localhost:5432/kamailio"
#!endif
#!endif

# - flags
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATWS 8
#!define FLB_NATSIPPING 7
#!define FLB_RTPWS 8
#!define FLB_BRIDGE 11

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=yes
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

port=MY_SIP_PORT
tls_port_no=MY_SIPS_PORT

#!ifdef WITH_TLS
enable_tls=yes
#!endif

listen=MY_IP_ADDR
#!ifdef WITH_WEBSOCKETS
listen=MY_WS4_ADDR
#!ifdef WITH_TLS
listen=MY_WSS4_ADDR
#!endif
#!endif

tcp_connection_lifetime=3604
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384

use_dns_cache = on			# Use KAMAILIO internal DNS cache
use_dns_failover = on		# Depends on KAMAILIO internal DNS cache
dns_srv_loadbalancing = on	
dns_try_naptr = on			
dns_retr_time=1				# Time in seconds before retrying a DNS request
dns_retr_no=3				# Number of DNS retransmissions before giving up

# Set protocol preference order - ignore target priority
dns_naptr_ignore_rfc= yes	# Ignore target NAPTR priority
dns_tls_pref=50				# First priority: TLS
dns_tcp_pref=30				# Second priority: TCP
dns_udp_pref=10				# Third priority: UDP

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules/"
#!else
mpath="/usr/local/lib64/kamailio/modules/"
#!endif

#!ifdef WITH_POSTGRES
loadmodule "db_postgres.so"
#!endif

loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "sdpops.so"
loadmodule "textopsx.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_WEBSOCKETS
loadmodule "xhttp.so"
loadmodule "websocket.so"
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)


# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)


# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
# max value for expires of registrations
modparam("registrar", "max_expires", 3600)


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
#!endif


# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
#!endif

#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif


##!ifdef WITH_NAT
# ----- rtpproxy params -----
modparam("rtpengine", "rtpengine_sock", "udp:<rtpengine_ip>:22222")
modparam("rtpengine", "extra_id_pv", "$avp(extra_id)")
modparam("pv", "varset", "rtpengineip=s:<rtpengine_ip>")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@sometelco.com")
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
##!endif

# ----- corex params -----
modparam("corex", "alias_subdomains", "MY_DOMAIN")

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "tls.cfg")
# Kamailio will start even if some of the OpenSSL sanity checks fail  ex TLS lib at compile diff from runtime , or diff kerberos 
modparam("tls", "tls_force_run", 11)
#!endif

#!ifdef WITH_WEBSOCKETS
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
#!endif

####### Routing Logic ########
request_route {

	xlog("L_INFO", "Request_route \n");

	# per request initial checks
	route(REQINIT);

	xlog("L_INFO", "START: $rm from $fu (IP:$si:$sp)\n");

	#!ifdef WITH_WEBSOCKETS
	if (nat_uac_test(64)) {
		# NAT traversal for requests from a WebSocket connection
		force_rport();
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else if (!add_contact_alias()) {
			xlog("L_ERR", "Error aliasing contact <$ct>\n");
			sl_send_reply("400", "Bad Request");
			exit;
		}
	}
	#!endif

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	t_check_trans();

	# authentication
	#route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	# dispatch requests to foreign domains
	route(SIPOUT);

	# handle presence related requests
	route(PRESENCE);

	# handle registrations
	route(REGISTRAR);

	if ($rU == $null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# user location service
	route(LOCATION);
}

# Wrapper for relaying requests
route[RELAY] {
	xlog("L_INFO", " route[RELAY] \n");

	#  additional event routes for forwarded requests
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if (!t_is_set("branch_route")) {
			t_on_branch("MANAGE_BRANCH");
		}
	}

	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if (!t_is_set("onreply_route")) {
			t_on_reply("MANAGE_REPLY");
		}
	}

	if (is_method("INVITE")) {
		if (!t_is_set("failure_route")) {
			t_on_failure("MANAGE_FAILURE");
		}
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	xlog("L_INFO", "[$ci - $rm] route[REQINIT] - resuest URI - $ru and destination URI - $du \n");

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# record-routing for in dialogs requests
		if (loose_route()) {
		#!ifdef WITH_WEBSOCKETS
			if ($du == "") {
				if (!handle_ruri_alias()) {
					xlog("L_ERR", "Bad alias <$ru>\n");
					sl_send_reply("400", "Bad Request");
					exit;
				}
			}
		#!endif
			route(DLGURI);
			if (is_method("ACK")) {
				# ACK is forwarded statelessy
				route(NATMANAGE);
			} else if (is_method("NOTIFY")) {
				# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
				record_route();
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if (is_method("ACK")) {
				if (t_check_trans()) {
					# no loose-route, but stateful ACK;
					route(RELAY);
					exit;
				} else {
					# ACK without matching transaction.ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Handle SIP registrations
route[REGISTRAR] {
	xlog("L_INFO", "[$ci - $rm]  route[REGISTRAR] for destination URI - $du \n");

	if (is_method("REGISTER")) {
		if (isflagset(FLT_NATS)) {
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging
			## setbflag(FLB_NATSIPPING);
		}

		if (!save("location")) {
			sl_reply_error();
		}

		exit;
	}
}

# USER location service
route[LOCATION] {
	xlog("L_INFO", "[$ci - $rm] route[LOCATION] \n");

	if (!lookup("location")) {
		$var(rc) = $rc;
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	route(RELAY);
	exit;
}

# Presence server route
route[PRESENCE] {
	xlog("L_INFO","[$ci - $rm] route[PRESENCE] \n");
	
	if (!is_method("PUBLISH|SUBSCRIBE")) {
		return;
	}

	if (is_method("SUBSCRIBE") && $hdr(Event) == "message-summary") {
		# returns here if no voicemail server is configured
		sl_send_reply("404", "No voicemail service");
		exit;
	}

	#!ifdef WITH_PRESENCE
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if (is_method("PUBLISH")) {
		handle_publish();
		t_release();
	} else if (is_method("SUBSCRIBE")) {
		handle_subscribe();
		t_release();
	}
	exit;
	#!endif

	# if presence enabled, this part will not be executed
	if (is_method("PUBLISH") || $rU == $null) {
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

# Authentication route
route[AUTH] {
#!ifdef WITH_AUTH
	if (is_method("REGISTER") || from_uri == myself) {
		# authenticate requests
		if (!auth_check("$fd", "subscriber", "1")) {
			auth_challenge("$fd", "0");
			exit;
		}
		# user authenticated - remove auth header
		if (!is_method("REGISTER|PUBLISH")) {
			consume_credentials();
		}
	}
#!endif
	return;
}

# Caller NAT detection route
route[NATDETECT] {
	xlog("L_INFO", "[$ci - $rm] route[NATDETECT] \n");
	force_rport();
	if (nat_uac_test("19")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else if (is_first_hop()) {
			set_contact_alias();
		}
		setflag(FLT_NATS);
	}
	return;
}

# NAT handling
route[NATMANAGE] {
	xlog("L_INFO", "[$ci - $rm] route[NATMANAGE] \n");
	
	if (is_request()) {
		if (has_totag()) {
			if (check_route_param("nat=yes")) {
				xlog("L_INFO", "route-param nat=yes \n");
				setbflag(FLB_NATB);
			}

			if (check_route_param("nat=ws")) {
				xlog("L_INFO", "route-param nat=ws \n");
				setbflag(FLB_NATWS);
			}

			if (check_route_param("rtp=bridge")) {
				xlog("L_INFO", "route-param rtp=bridge \n");
				setbflag(FLB_BRIDGE);
			}

			if (check_route_param("rtp=ws")) {
				xlog("L_INFO", "route-param rtp=ws \n");
				setbflag(FLB_RTPWS);
			}
		}
	}

	if (!isbflagset(FLB_BRIDGE)) {
		xlog("L_INFO", " bridge flag not set , return \n");
		return;
	}

	if ( !( isflagset(FLT_NATS) || isbflagset(FLB_NATB) || isbflagset(FLB_RTPWS)  || isbflagset(FLB_NATWS) ) ) {
		xlog("L_INFO", " neither flag set , NATS , NATB , FLB_RTPWS , return \n");
		return;
	}


	if (isbflagset(FLB_NATWS)) { 
		# need RTPEngine web/SIP bridging

		if ($proto =~ "ws") { 
			# This message coming from web --> SIP
			if (is_request()) {
				xlog("L_INFO", "$rm request: WebRTC --> SIP");
			} else {
				xlog("L_INFO", "$rs response: WebRTC --> SIP");
			}

			rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-dmux RTP/AVP media-address=$var(tpengineip) record-call=on");
		
		} else { 
			# This message coming from SIP --> web
			if (is_request()) {
				xlog("L_INFO", "$rm request: SIP --> WebRTC");
			} else {
				xlog("L_INFO", "$rs response: SIP --> WebRTC");
			}

			if(nat_uac_test("8")) {
				rtpengine_manage("replace-origin replace-session-connection rtcp-mux-offer rtcp-mux-accept media-address=$var(tpengineip) RTP/SAVPF record-call=on");
			} else {
				rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-offer rtcp-mux-accept media-address=$var(tpengineip) RTP/SAVPF record-call=on");
			}
		}
	
	} else { 
		# We need NAT, but not SIP/web bridging
		
		if ($proto =~ "ws") { 
			# Web --> web
			if (is_request()) {
				xlog("L_INFO", "$rm request: WebRTC --> WebRTC");
			} else {
				xlog("L_INFO", "$rs response: WebRTC --> WebRTC");
			}

			rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-offer rtcp-mux-accept media-address=$var(tpengineip) record-call=on");
		
		} else { 
			# SIP --> SIP
			if (is_request()) {
				xlog("L_INFO", "$rm request: SIP --> SIP");
			} else {
				xlog("L_INFO", "$rs response: SIP --> SIP");
			}

			if(nat_uac_test("8")) {
				rtpengine_manage("replace-origin replace-session-connection rtcp-mux-offer rtcp-mux-accept media-address=$var(tpengineip) record-call=on");
			} else {
				rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-offer rtcp-mux-accept media-address=$var(tpengineip) record-call=on");
			}
		}
	}

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				xlog("L_INFO", "NATMANAGE is_request , doesnt have to tag, t_is_branch_route  thus first requst , add rr params \n ");
				if(isbflagset(FLB_NATWS)) {
					add_rr_param(";nat=ws");
				} else {
					add_rr_param(";nat=yes");
				}
			}
		}
	}

	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop()) {
				xlog("L_INFO", "[$ci] NATMANAGE is_reply , first hop thus first reply , add contat alias \n ");
				set_contact_alias();
			}
		}
	}
	return;
}

# URI update for dialog requests
route[DLGURI] {
	if (!isdsturiset()) {
		handle_ruri_alias();
	}
	return;
}

# Routing to foreign domains
route[SIPOUT] {
	if (!uri == myself) {
		append_hf("P-hint: outbound\r\n");
		route(RELAY);
	}
}

route[BRIDGING] {
	# if traffic is from ws and going to not ws or vice versa , do bridging by setting flag
	if (!has_totag()) {
		if ($proto =~ "ws" && !($ru =~ "transport=ws")) { 
			# incoming protoocl ws , outgoing protocl is not ws , need bridging
			setbflag(FLB_RTPWS); 
		} else if (!($proto =~ "ws") && $ru =~ "transport=ws") { 
			# incoming protocl not ws , outgoing protocl ws , need bridging
			setbflag(FLB_RTPWS); 
		}
	}
}

# manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xlog("L_INFO", "MANAGE_BRANCH: New branch [$T_branch_idx] to $ru\n");
	t_on_branch_failure("rtpengine");
	route(BRIDGING);
	route(NATMANAGE);
}

# manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");
	if (status =~ "[12][0-9][0-9]") {
		route(NATMANAGE);
	}
}

# manage failure routing cases
failure_route[MANAGE_FAILURE] {
	xlog("L_INFO", "Failure: $rs");
}

#!ifdef WITH_WEBSOCKETS
onreply_route {
	if ((($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT)
		&& !(proto == WS || proto == WSS))) {
		xlog("L_WARN", "SIP response received on $Rp\n");
		drop;
	}

	# nat_uac_test 64 , Test if the source connection of signaling is a WebSocket
	if (nat_uac_test(64)) {
		# NAT traversal for replies to a WebSocket connection
		add_contact_alias();
	}
}

event_route[tm:branch-failure:rtpengine] {
	xlog("L_INFO", "BRANCH FAILED: $sel(via[1].branch) + $T_branch_idx");
	$avp(extra_id) = @via[1].branch + $T_branch_idx;
	rtpengine_delete("via-branch=extra");
}

event_route[xhttp:request] {
	xlog("L_INFO", "event_route xhttp \n");
	set_reply_close();
	set_reply_no_connect();

	if ($Rp != MY_WS_PORT
#!ifdef WITH_TLS
		&& $Rp != MY_WSS_PORT
#!endif
	) {
		xlog("L_WARN", "HTTP request received on $Rp\n");
		xhttp_reply("403", "Forbidden", "", "");
		exit;
	}

	xlog("L_INFO", "HTTP Request Received\n");

	if ($hdr(Upgrade) =~ "websocket"
		&& $hdr(Connection) =~ "Upgrade"
		&& $rm =~ "GET"
	) {

		# Validate Host - make sure the client is using the correct alias for WebSockets
		if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
			xlog("L_WARN", "Bad host $hdr(Host)\n");
			xhttp_reply("403", "Forbidden", "", "");
			exit;
		}
		if (ws_handle_handshake()) {
			# Optional... cache some information about the successful connection
			exit;
		}


	}

	xhttp_reply("404", "Not Found", "", "");
}

event_route[websocket:closed] {
	xlog("L_INFO", "WebSocket connection from $si:$sp has closed\n");
}
#!endif