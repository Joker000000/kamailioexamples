!KAMAILIO

####### Defined Values #########

#!substdef "!MY_IP_ADDR!kamailio_pvtip!g"
#!substdef "!MY_EXTERNAL_IP!kamailio_ip!g"
#!substdef "!MY_UDP_PORT!5060!g"
#!substdef "!MY_TCP_PORT!5060!g"
#!substdef "!MY_UDP_ADDR!udp:MY_IP_ADDR:MY_UDP_PORT!g"
#!substdef "!MY_TCP_ADDR!tcp:MY_IP_ADDR:MY_TCP_PORT!g"

# Relay All requests and replys set flags 

# ----------- global configuration parameters ------------------------

debug=2         # debug level (cmd line: -dddddddddd)

#fork=yes
#log_stderror=no        # (cmd line: -E)
fork=no
log_stderror=yes

#check_via=no   # (cmd. line: -v)
#dns=no          # (cmd. line: -r)
#rev_dns=no      # (cmd. line: -R)

children=4
#fifo="/tmp/ser_fifo"

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

port=5060
mpath = "/usr/local/lib64/kamailio/modules/:/usr/lib/x86_64-linux-gnu/kamailio/modules/"

listen = MY_UDP_ADDR advertise MY_EXTERNAL_IP:MY_UDP_PORT
listen = MY_TCP_ADDR advertise MY_EXTERNAL_IP:MY_TCP_PORT

# ------------------ module loading ----------------------------------

loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"  
loadmodule "textops.so"
#loadmodule "siputils.so"
loadmodule "nathelper.so"
loadmodule "rtpproxy.so"
loadmodule "xlog.so"
        
# ----------------- setting module-specific parameters ---------------
             
# -- usrloc params -- 
modparam("usrloc", "db_mode",   0)
# Uncomment this if you want to use SQL database for persistent storage and comment the previous line
# modparam("usrloc", "db_mode", 2)

# -- rr params --
modparam("rr", "enable_full_lr", 1)

# -- xlog params
modparam("xlog", "force_color", 0)
modparam("xlog", "long_format", 1)

# -- Nathelper

# modparam("registrar", "nat_flag", 6) removed as the module internally loads this value from the “USRLOC” module
modparam("usrloc", "nat_bflag", 3)
modparam("nathelper", "natping_interval", 30) # Ping interval 30 s
modparam("nathelper", "ping_nated_only", 1)   # Ping only clients behind NAT

# -------------------------  request routing logic -------------------

# main routing logic

route{

	xlog("L_INFO", "SIP PACKET $rm $ci $ct from Source $si:$sp - Received on $Ri:$Rp \n");

	# initial sanity checks -- messages with max_forwards==0
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		break;
	};

	# check for excessively long requests
	#if ( $ml >=  max_len ) {
	#	sl_send_reply("513", "Message too big");
	#	break;
	#};

	# NATed clients test - looks for via!=received and RFC1918 addresses in Contact
    if (nat_uac_test("3")) {
    
    	# Allow RR-ed requests, as these may indicate that a NAT-enabled proxy takes care of it; unless it is REGISTER
    	if (method == "REGISTER" || ! search("^Record-Route:")) {
    		log("LOG: Someone trying to register from private IP, rewriting\n");

		    # work only for user agents that support symmetric communication.
		    fix_nated_contact(); # Rewrite contact with source IP of signalling
		    if (method == "INVITE") {
		        fix_nated_sdp("1"); # Add direction=active to SDP
		    };
		    force_rport(); # Add rport parameter to topmost Via
		    setflag(6);    # Mark as NATed
    	}
    }

	# record-route all messages -- to make sure that subsequent messages will go through our proxy
	if (!method=="REGISTER") record_route();
	
	# subsequent messages withing a dialog should take the path determined by record-routing
	if (loose_route()) {
		# mark routing logic in request
		append_hf("P-hint: rr-enforced\r\n"); 
		route(1);
		break;
	};

	if (!uri==myself) {
		# mark routing logic in request
		append_hf("P-hint: outbound\r\n"); 
		route(1);
		break;
	};

	# if the request is for other domain use UsrLoc
	if (uri==myself) {
		if (method=="REGISTER") {
			save("location");
			break;
		};

		lookup("aliases");
		if (!uri==myself) {
			append_hf("P-hint: outbound alias\r\n"); 
			route(1);
			break;
		};

		# native SIP destinations are handled using our USRLOC DB
		if (!lookup("location")) {
			sl_send_reply("404", "Not Found");
			break;
		};
	}

	append_hf("P-hint: usrloc applied\r\n"); 
	route(1);
}


route[1] 
{
	# Nathelper , check if uri is a pvt address , reply 479 
	if (uri=~"[@:](192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[0-1])\.)" && !search("^Route:")){
	    sl_send_reply("479", "We don't forward to private IP addresses");
	    break;
    };
	
	# if client or server know to be behind a NAT, enable relay
	if (isflagset(6)) {
	    force_rtp_proxy();
	};

	# NAT processing of replies; apply to all transactions 
	t_on_reply("1");

	# stateful forwarding as it works reliably even for UDP2TCP
	if (!t_relay()) {
		sl_reply_error();
	};
}


onreply_route[1] {
    # NATed transaction check
    if (isflagset(6) && status =~ "(183)|2[0-9][0-9]") {
        fix_nated_contact();
		force_rtp_proxy();
    # otherwise, is it a transaction behind a NAT and we did not know at time of request processing 
    } else if (nat_uac_test("1")) {
        fix_nated_contact();
    };
}

