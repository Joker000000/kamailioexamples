    
#!KAMAILIO

#!define WITH_NAT

####### Defined Values #########

#!substdef "!MY_SIP_PORT!5060!g"
#!substdef "!MY_SIPS_PORT!5061!g"

#!substdef "!MY_IP4_ADDR!172.20.10.8!g"
#!substdef "!MY_EXTERNAL_IP!172.20.10.8!g"

#!ifdef WITH_MYSQL
#!ifndef DBURL
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!endif
#!endif

#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=yes
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes */
children=8

/* uncomment the next line to disable TCP (default on) */
# disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
# auto_aliases=no

/* add local domain aliases */
alias="sip.companytelecomsometing.com"

/* uncomment and configure the following line if you want Kamailio to
 * bind on a specific interface/port/proto (default bind on all available) */
#listen = udp:127.0.0.1:5060
listen = udp:MY_IP4_ADDR:MY_SIP_PORT advertise MY_EXTERNAL_IP:MY_SIP_PORT
listen = tcp:MY_IP4_ADDR:MY_SIP_PORT advertise MY_EXTERNAL_IP:MY_SIP_PORT

#!ifdef WITH_TLS
enable_tls=yes
#!endif


####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules/"
#!else
mpath="/usr/local/lib64/kamailio/modules/"
#!endif

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"

loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
# loadmodule "counters.so"

loadmodule "dialog.so"
loadmodule "textops.so"
loadmodule "sdpops.so"

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif


#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------


# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
# modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")


# ---- dialog params ----
modparam("dialog", "enable_stats", 1)
modparam("dialog", "dlg_flag", 4)
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "track_cseq_updates", 1)
modparam("dialog", "event_callback", "ksr_dialog_event")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 10000)
modparam("tm", "fr_inv_timer", 120000)
modparam("tm", "restart_fr_on_each_reply", 1)
modparam("tm", "pass_provisional_replies", 1)
modparam("tm", "contacts_avp", "tm_contacts");
modparam("tm", "contact_flows_avp", "tm_contact_flows");

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 1)
# modparam("rr", "force_send_socket", 1)
# modparam("rr", "enable_double_rr", 1)

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/usr/local/etc/kamailio/tls.cfg")
#!endif

# ----- nathelper params ----
modparam("nathelper", "received_avp", "$avp(s:rcv)")

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:3.90.71.92:2222")
modparam("rtpengine", "extra_id_pv", "$avp(extra_id)")

modparam("rtpengine", "rtpengine_allow_op", 1)
modparam("rtpengine", "queried_nodes_limit", 4)
modparam("rtpengine", "rtpengine_retr", 2)
modparam("rtpengine", "rtp_inst_pvar", "$avp(RTP_INSTANCE)")
modparam("rtpengine", "setid_default", 1)

modparam("rtpengine", "mos_max_pv", "$avp(mos_max)")
modparam("rtpengine", "mos_average_pv", "$avp(mos_average)")
modparam("rtpengine", "mos_min_pv", "$avp(mos_min)")

modparam("rtpengine", "mos_average_packetloss_pv", "$avp(mos_average_packetloss)")
modparam("rtpengine", "mos_average_jitter_pv", "$avp(mos_average_jitter)")
modparam("rtpengine", "mos_average_roundtrip_pv", "$avp(mos_average_roundtrip)")
modparam("rtpengine", "mos_average_samples_pv", "$avp(mos_average_samples)")

modparam("rtpengine", "mos_min_pv", "$avp(mos_min)")
modparam("rtpengine", "mos_min_at_pv", "$avp(mos_min_at)")
modparam("rtpengine", "mos_min_packetloss_pv", "$avp(mos_min_packetloss)")
modparam("rtpengine", "mos_min_jitter_pv", "$avp(mos_min_jitter)")
modparam("rtpengine", "mos_min_roundtrip_pv", "$avp(mos_min_roundtrip)")

modparam("rtpengine", "mos_A_label_pv", "$avp(mos_A_label)")
modparam("rtpengine", "mos_average_packetloss_A_pv", "$avp(mos_average_packetloss_A)")
modparam("rtpengine", "mos_average_jitter_A_pv", "$avp(mos_average_jitter_A)")
modparam("rtpengine", "mos_average_roundtrip_A_pv", "$avp(mos_average_roundtrip_A)")
modparam("rtpengine", "mos_average_A_pv", "$avp(mos_average_A)")

modparam("rtpengine", "mos_B_label_pv", "$avp(mos_B_label)")
modparam("rtpengine", "mos_average_packetloss_B_pv", "$avp(mos_average_packetloss_B)")
modparam("rtpengine", "mos_average_jitter_B_pv", "$avp(mos_average_jitter_B)")
modparam("rtpengine", "mos_average_roundtrip_B_pv", "$avp(mos_average_roundtrip_B)")
modparam("rtpengine", "mos_average_B_pv", "$avp(mos_average_B)")

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

####### Routing Logic ########


/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

	xlog("L_INFO"," ------------------ request_route  $rm from $fu (IP:$si:$sp) \n ");

	# per request initial checks
	route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		xlog("L_INFO"," CANCEL processing \n");
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		xlog("L_INFO"," retransmissions processing \n");
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	# remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {

		xlog("L_INFO"," INVITE processing \n");
		if (has_body("application/sdp")) {
			sdp_print("1");
			xlog("L_INFO"," INVITE has SDP , ask rtpengine to modify it for a new offer \n");
			# $var($rtp_flag) = "ICE=remove RTP/AVPF full-rtcp-attribute direction=internal replace-origin replace-session-connection record-call=yes label=Aleg_label PCMA,PCMU";
            # rtpengine_offer($var(rtp_flag));
        	# rtpengine_manage();
        	# rtpengine_offer( "label=Aleg_label");
        	rtpengine_offer("replace-origin replace-session-connection ICE=remove label=Aleg_label");
        }

	}

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	route(RELAY);
}

# Wrapper for relaying requests
route[RELAY] {

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay("3.223.129.191","5080")) {
	# if (!t_relay("13.234.177.239","5555")) {
		xlog("L_ALERT"," Relay failed  \n");
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	if($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	# if(!sanity_check("1511", "7")) {
	#	xlog("Malformed SIP message from $si:$sp\n");
	#	exit;
	# }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) return;

	xlog("L_INFO", " route WITHINDLG \n ");

	# sequential request withing a dialog should
	# take the path determined by record-routing

	# loose route - analyzes the Route: headers in the requests
	# if no header found - returns FALSE and routing should be done with normal lookup functions
	# header is found, the function returns 1 and behaves as described in section 16.12 of RFC 3261
	if (loose_route()) {

		xlog("L_INFO", " looseroute : sequential requets within dialog \n ");

		route(DLGURI);

		if (is_method("BYE")) {
			
			xlog("L_INFO", " BYE processing collect mos score \n");

			$avp("mos_A_label")="Aleg_label";
			$avp("mos_B_label")="Bleg_label";

			xlog("L_INFO", " rtpstats - $rtpstat\r\n ");
			append_hf("X-RTP-Statistics: $rtpstat\r\n");

			xlog("L_INFO", " ====================  delete RTPengine \n");
			rtpengine_delete();
			# rtpengine_manage();

			xlog("L_INFO", " mos avg $avp(mos_average) \n ");
			xlog("L_INFO", " mos max $avp(mos_max) \n ");
			xlog("L_INFO", " mos min $avp(mos_min)  \n ");

			xlog("L_INFO", "mos_average_packetloss_pv $avp(mos_average_packetloss)  \n");
			xlog("L_INFO", "mos_average_jitter_pv $avp(mos_average_jitter)  \n ");
			xlog("L_INFO", "mos_average_roundtrip_pv $avp(mos_average_roundtrip) \n ");
			xlog("L_INFO", "mos_average_samples_pv $avp(mos_average_samples) \n ");

			xlog("L_INFO", "mos_min_pv $avp(mos_min) \n ");
			xlog("L_INFO", "mos_min_at_pv $avp(mos_min_at) \n ");
			xlog("L_INFO", "mos_min_packetloss_pv $avp(mos_min_packetloss) \n ");
			xlog("L_INFO", "mos_min_jitter_pv $avp(mos_min_jitter) \n ");
			xlog("L_INFO", "mos_min_roundtrip_pv $avp(mos_min_roundtrip) \n ");

			# xlog( "mos_A_label_pv $avp(mos_A_label) \n ");
			xlog("L_INFO", "mos_average_packetloss_A_pv $avp(mos_average_packetloss_A) \n ");
			xlog("L_INFO", "mos_average_jitter_A_pv $avp(mos_average_jitter_A) \n ");
			xlog("L_INFO", "mos_average_roundtrip_A_pv $avp(mos_average_roundtrip_A) \n ");
			xlog("L_INFO", "mos_average_A_pv $avp(mos_average_A) \n ");

			# xlog( "mos_B_label_pv $avp(mos_B_label) \n ");
			xlog("L_INFO", "mos_average_packetloss_B_pv $avp(mos_average_packetloss_B) \n ");
			xlog("L_INFO", "mos_average_jitter_B_pv $avp(mos_average_jitter_B) \n ");
			xlog("L_INFO", "mos_average_roundtrip_B_pv $avp(mos_average_roundtrip_B) \n ");
			xlog("L_INFO", "mos_average_B_pv $avp(mos_average_B) \n ");

		} else if ( is_method("ACK") ) {
			# ACK is forwarded statelessly
			route(NATMANAGE);
		}
		route(RELAY);
		exit;
	}

	xlog("L_INFO", " loose routing could not be done  \n ");

	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}


	# sl_send_reply("404","Not here");
	exit;
}

# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
	xlog("L_INFO", " NATDetect force rport \n ");
	force_rport();
	# if (nat_uac_test("19")) {
		if(is_first_hop()) {
			xlog("L_INFO", " NATDetect is frst hop , set contact alias \n ");
			set_contact_alias();
		}
		xlog("L_INFO", " NATDetect set flag , FLT_NATS  \n ");
		setflag(FLT_NATS);
	# }
#!endif
	return;
}

# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {
#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

	# if(nat_uac_test("8")) {
		# rtpproxy_manage("co");
	# } else {
		# rtpproxy_manage("cor");
	# }

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop())
				set_contact_alias();
		}
	}
#!endif
	return;
}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
#!endif
	return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");

	if (has_body("application/sdp")){
		sdp_print("1");
		xlog("L_INFO", "Got a succesful reply , ask rtpengine to modify answer SDP \n ");
        # $var($rtp_flag) = "ICE=remove RTP/AVPF full-rtcp-attribute direction=internal replace-origin replace-session-connection record-call=yes label=Bleg_label";
        # rtpengine_answer($var($rtp_flag));
        # rtpengine_manage();
        # rtpengine_answer("label=Bleg_label");
        rtpengine_answer("replace-origin replace-session-connection ICE=remove label=Bleg_label");
	}

	# if status is not 1xx or 2xx , do natmanage 
	if(status=~"[12][0-9][0-9]") {
		route(NATMANAGE);
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	xlog("L_INFO", "Failure: $rs");

	route(NATMANAGE);

	if (t_is_canceled()) exit;

	t_reply("404","ok bye");
}

